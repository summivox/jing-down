// Generated by CoffeeScript 1.3.3
(function() {
  
// ==UserScript==
// @name            jing-down
// @namespace       http://github.com/smilekzs
// @description     add links to jing.fm player, pointing to music file & album cover art
// @include         *jing.fm*
// @version         1.8.87.1
// ==/UserScript==
;

  var injectScript;

  injectScript = function(src) {
    var scriptEl;
    scriptEl = document.createElement('script');
    scriptEl.innerHTML = "(" + (src.toString()) + ")();";
    return document.head.appendChild(scriptEl);
  };

  injectScript(function() {
    var JingDown, Scheduler, smilekzs_cron, smilekzs_jd;
    smilekzs_jd = new (JingDown = (function() {
      var Lib, Ui;

      Lib = (function() {

        function Lib() {
          this.lib = [];
        }

        Lib.prototype.exist = function(head) {
          return !!this.lib[head.tid];
        };

        Lib.prototype.get = function(head, cb) {
          if (this.exist(head)) {
            return cb(this.lib[head.tid]);
          } else {
            return this.refresh(head, cb);
          }
        };

        Lib.prototype.getSync = function(head) {
          var ret;
          if (!(ret = this.lib[head.tid])) {
            this.get(head);
          }
          return ret;
        };

        Lib.prototype.refresh = function(head, cb) {
          var art,
            _this = this;
          art = window.$.id2url(head.fid, "image", "AL", "album");
          if (!art) {
            throw Error("!! can't get art");
          }
          window.$.ajax({
            url: window.Core.API_VER + "/media/song/surl",
            data: {
              mid: head.mid,
              type: "NO"
            },
            success: function(t) {
              if (!t.success) {
                throw Error("!! can't get audio");
              }
              _this.lib[head.tid] = {
                head: head,
                art: art,
                audio: t.result
              };
              return typeof cb === "function" ? cb(_this.lib[head.tid]) : void 0;
            }
          });
          return null;
        };

        return Lib;

      })();

      Ui = (function() {

        function Ui() {}

        Ui.prototype.make = function() {
          var mscPlrCtnEl, mscPlrMaskEl, titEl, _ref, _ref1, _ref2;
          titEl = (_ref = document.getElementsByClassName('tit')) != null ? _ref[0] : void 0;
          if (!titEl) {
            throw Error("!! can't find tit");
          }
          if (titEl.firstChild.nodeName !== 'A') {
            this.audio_aEl = document.createElement('a');
            this.audio_aEl.id = 'smilekzs_audio_a';
            this.audio_aEl.innerHTML = titEl.firstChild.data;
            titEl.replaceChild(this.audio_aEl, titEl.firstChild);
          }
          mscPlrCtnEl = document.getElementById('mscPlrCtn');
          if (!mscPlrCtnEl) {
            throw Error("!! can't find mscPlrCtn");
          }
          this.art_aEl = (_ref1 = mscPlrCtnEl.getElementsByClassName('smilekzs_art_a')) != null ? _ref1[0] : void 0;
          if (!this.art_aEl) {
            mscPlrMaskEl = (_ref2 = document.getElementsByClassName('mscPlrMask')) != null ? _ref2[0] : void 0;
            if (!mscPlrMaskEl) {
              throw Error("!! can't find mscPlrMask");
            }
            this.art_aEl = document.createElement('a');
            mscPlrCtnEl.replaceChild(this.art_aEl, mscPlrMaskEl);
            this.art_aEl.appendChild(mscPlrMaskEl);
            this.art_aEl.className = 'smilekzs_art_a';
            return this.art_aEl.target = '_blank';
          }
        };

        Ui.prototype.set = function(o) {
          return this.audio_aEl.href = o.audio, this.art_aEl.href = o.art, o;
        };

        return Ui;

      })();

      function JingDown() {
        this.lib = new Lib;
        this.ui = new Ui;
      }

      JingDown.prototype.patch = function() {
        var head, _ref,
          _this = this;
        if (!((_ref = window.Player.music) != null ? _ref.length : void 0)) {
          return false;
        }
        head = window.Player.music.filter(function(m) {
          return m.tid === Player.tid;
        })[0];
        if (!head) {
          return false;
        }
        if (!this.lib.exist(head)) {
          this.lib.get(head, function() {
            return _this.patch();
          });
          return false;
        }
        this.ui.make();
        this.ui.set(this.lib.getSync(head));
        return true;
      };

      return JingDown;

    })());
    smilekzs_cron = new (Scheduler = (function() {

      function Scheduler() {
        this.iid = null;
      }

      Scheduler.prototype.stop = function() {
        if (this.iid != null) {
          return clearInterval(this.iid);
        }
      };

      Scheduler.prototype.start = function(timeout) {
        var _this = this;
        if (timeout == null) {
          timeout = 1000;
        }
        this.stop();
        return this.iid = setTimeout((function() {
          return _this.fire();
        }), timeout);
      };

      Scheduler.prototype.fire = function() {
        if (smilekzs_jd.patch()) {
          return this.start(1000);
        } else {
          return this.start(3000);
        }
      };

      return Scheduler;

    })());
    return smilekzs_cron.start();
  });

}).call(this);
